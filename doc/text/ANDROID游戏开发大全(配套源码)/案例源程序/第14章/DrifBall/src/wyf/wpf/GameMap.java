package wyf.wpf;		//声明包语句
/*
 * 该类主要存储一个静态成员，3为数组，里面存放所有地图，每个地图
 * 都是一个二维数组。同时还提供了一个静态方法，调用之后返回一个
 * 地图的二维数组
 */
public class GameMap{
	static byte [][][] map = {//地图，为0则空，为1则路,2为家,3是加命的,4是吃小球的,5是陷阱,6是大炮
			{	//第一关
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,5,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0},
				{0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0},
				{0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0},
				{0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0},
				{0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0},
				{0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0},
				{0,4,0,1,0,0,0,0,0,0,0,1,0,0,4,0},
				{4,3,1,1,1,1,1,0,1,1,1,1,1,1,3,4},
				{0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0},
				{0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0},
				{0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0}
			},
			{	//第二关
				{1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,1,0,0,0,0,1,1,1,5,1,1,1,1,0},
				{0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0},
				{0,1,1,1,5,1,0,1,0,0,1,1,1,1,1,0},
				{0,1,0,0,0,1,0,1,0,0,1,0,4,0,4,0},
				{0,1,0,4,3,1,0,1,1,1,1,1,1,1,1,0},
				{0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0},
				{0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0},
				{4,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0},
				{0,0,1,0,0,0,0,1,0,0,4,1,0,0,0,0},
				{0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,3,4,0,0},
				{0,3,1,5,1,1,1,1,0,0,0,1,0,0,0,0},
				{0,1,0,0,0,0,0,1,0,0,4,1,0,0,0,0},
				{0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
				{0,1,1,1,3,5,1,1,1,1,1,1,5,1,1,0},
				{0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0},
				{0,0,0,1,0,0,0,1,0,1,1,0,0,0,1,0},
				{0,1,1,1,1,1,1,1,1,1,0,0,2,0,1,0},
				{0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0},
				{0,1,0,0,4,0,0,1,0,1,0,0,1,1,1,0},
				{0,1,1,1,1,1,1,1,1,1,5,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			},
			{	//第三关
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,1,3,1,0,0,0,0,0,0},
				{0,1,1,1,5,1,1,1,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,0,1,1,1,5,1,1,0},
				{0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0},
				{0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0},
				{0,1,0,0,0,3,1,1,0,1,1,1,1,1,3,0},
				{0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0},
				{0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,6},
				{0,3,0,0,1,0,1,1,1,1,0,0,0,0,0,0},
				{0,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,0,0,0,0,1,1,1,1,1,1,3,0,0},
				{0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0},
				{0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,1},
				{0,1,1,1,5,1,1,1,0,0,1,0,0,1,0,1},
				{0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1},
				{0,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
				{0,1,1,1,1,1,1,1,1,1,0,0,0,4,0,1},
				{0,0,0,0,3,0,0,0,0,1,0,0,0,3,0,1},
				{0,0,0,0,4,0,4,0,0,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,3,0,0,1,0,3,0,0,0,0},
				{0,1,1,1,5,1,1,1,1,1,0,4,0,0,0,0},
				{0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			},
			{	//第四关
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,0,4,0,0,0,0,0,0},
				{0,0,1,1,1,1,1,1,0,1,1,1,5,1,3,0},
				{0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},
				{0,1,1,1,5,1,1,1,1,1,0,0,0,0,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
				{0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
				{0,1,1,1,1,1,1,1,5,1,0,0,0,0,0,0},
				{0,4,0,0,0,0,0,1,0,1,1,1,1,1,1,0},
				{0,0,0,1,1,1,1,1,0,0,4,0,0,0,1,0},
				{0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0},
				{0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0},
				{0,3,1,1,1,5,1,1,1,1,1,1,1,5,3,0},
				{6,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,3,1,1,0,0,4,1,0,0,0,0,0,0},
				{0,0,0,1,0,0,0,1,1,1,1,5,1,1,0,0},
				{0,3,1,1,0,0,0,1,0,0,0,0,0,1,0,0},
				{0,1,0,0,0,4,0,1,0,0,0,0,0,1,0,0},
				{0,1,1,1,1,1,1,3,0,0,0,0,0,1,1,0},
				{0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,2}
			},
			{	//第五关
				{1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0},
				{0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,1,0,0,0,0,0,0,1,1,5,1,1,0,0},
				{0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0},
				{0,4,1,1,1,1,1,5,1,1,1,1,1,1,1,0},
				{0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0},
				{0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0},
				{0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0},
				{0,1,0,0,1,0,0,0,0,3,1,1,1,1,1,0},
				{0,1,0,0,1,0,0,6,0,0,0,0,0,0,1,0},
				{0,1,1,1,1,3,0,0,0,0,0,0,4,3,1,0},
				{0,0,0,0,0,1,1,3,0,0,0,0,0,0,1,0},
				{0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,4},
				{0,1,1,5,1,1,0,1,1,1,1,1,0,0,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
				{0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,3,1,1,0,0},
				{0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0},
				{0,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0},
				{0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
				{0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0},
				{0,1,1,1,1,1,0,0,0,1,1,1,1,3,0,0},
				{2,1,0,0,4,0,0,0,0,0,0,0,0,0,0,6}
			}			
	};
	//方法，返回指定关卡的地图数组
	public static byte[][] getMap(int level){
		return map[level-1];
	}
}